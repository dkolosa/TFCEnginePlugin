using Microsoft.Win32;
using System;
using System.Collections;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Text;

using AGI.Attr;
using AGI.Plugin;
using AGI.Astrogator;
using AGI.Astrogator.Plugin;
using AGI.STK.Plugin;

namespace TFCAttitude
{
    /// <summary>
    /// Example1 Gator Attitude Control
    /// </summary>
    // NOTE: Generate your own Guid using Microsoft's GuidGen.exe
    // If you used this plugin in STK 6, 7 you should create a new
    // copy of your plugin's source, and update it with a new GUID
    // for STK 8.  Then you will be able to make changes in the 
    // new STK 8 plugin and not affect your old STK 6,7 plugin.
    [Guid("FA2F035C-DD6B-4740-A111-7E5447A00FA0")]
    // NOTE: Create your own ProgId to match your plugin's namespace and name
    [ProgId("TFCAttitude.TFCAtt")]
    // NOTE: Specify the ClassInterfaceType.None enumeration, so the custom COM Interface 
    // you created, i.e. IExample1, is used instead of an autogenerated COM Interface.
    [ClassInterface(ClassInterfaceType.None)]

    public class TFCAtt:
        IAttitudePlugin,
        IAgGatorPluginAttCtrl,
        IAgUtPluginConfig
    {

        #region Data Members
        private IAgUtPluginSite m_UtPluginSite = null;
        private object m_AttrScope = null;
        private AgGatorPluginProvider m_gatorPrv = null;


        private string m_Name = "TFCAttitudeR";

        private AgGatorConfiguredCalcObject m_eccAno = null;

        //14 Thrust coeff.
        private AgGatorConfiguredCalcObject m_alpha0 = null;
        private AgGatorConfiguredCalcObject m_alpha1 = null;
        private AgGatorConfiguredCalcObject m_alpha2 = null;
        private AgGatorConfiguredCalcObject m_alpha3 = null;
        private AgGatorConfiguredCalcObject m_alpha4 = null;
        private AgGatorConfiguredCalcObject m_alpha5 = null;
        private AgGatorConfiguredCalcObject m_alpha6 = null;
        private AgGatorConfiguredCalcObject m_alpha7 = null;
        private AgGatorConfiguredCalcObject m_alpha8 = null;
        private AgGatorConfiguredCalcObject m_alpha9 = null;
        private AgGatorConfiguredCalcObject m_alpha10 = null;
        private AgGatorConfiguredCalcObject m_alpha11 = null;
        private AgGatorConfiguredCalcObject m_alpha12 = null;
        private AgGatorConfiguredCalcObject m_alpha13 = null;

        #endregion

        public TFCAtt()
        {
            try
            {
                Debug.WriteLine("Plugin started");
            }
            finally
            {
                Debug.WriteLine("Plugin Exited");
            }
        }

        ~TFCAtt()
        {
            try
            {
                Debug.WriteLine("Entered", "~TFCAtt");
            }
            finally
            {
                Debug.WriteLine("Exited", "~TFCAtt");
            }

        }

        private void Message(AgEUtLogMsgType msgType, string msg)
        {
            if (this.m_UtPluginSite != null)
                this.m_UtPluginSite.Message(msgType, msg);
        }

        public String Name
        {
            get { return this.m_Name; }
            set { this.m_Name = value; }
        }


        #region IAgGatorPluginEngineModel Interface Implementation
        public bool Init(IAgUtPluginSite site)
        {
            this.m_UtPluginSite = site;

            if (this.m_UtPluginSite != null)
            {
                this.m_gatorPrv = ((IAgGatorPluginSite)(this.m_UtPluginSite)).GatorProvider;

                if (this.m_gatorPrv != null)
                {
                    this.m_eccAno = this.m_gatorPrv.ConfigureCalcObject("Eccentric_Anomaly");

                    //Retrieve TFC values from the engine plugin stk 
                    this.m_alpha0 = this.m_gatorPrv.ConfigureCalcObject("Alpha0");
                    this.m_alpha1 = this.m_gatorPrv.ConfigureCalcObject("Alpha1");
                    this.m_alpha2 = this.m_gatorPrv.ConfigureCalcObject("Alpha2");
                    this.m_alpha3 = this.m_gatorPrv.ConfigureCalcObject("Alpha3");
                    this.m_alpha4 = this.m_gatorPrv.ConfigureCalcObject("Alpha4");
                    this.m_alpha5 = this.m_gatorPrv.ConfigureCalcObject("Alpha5");
                    this.m_alpha6 = this.m_gatorPrv.ConfigureCalcObject("Alpha6");
                    this.m_alpha7 = this.m_gatorPrv.ConfigureCalcObject("Alpha7");
                    this.m_alpha8 = this.m_gatorPrv.ConfigureCalcObject("Alpha8");
                    this.m_alpha9 = this.m_gatorPrv.ConfigureCalcObject("Alpha9");
                    this.m_alpha10 = this.m_gatorPrv.ConfigureCalcObject("Alpha10");
                    this.m_alpha11 = this.m_gatorPrv.ConfigureCalcObject("Alpha11");
                    this.m_alpha12 = this.m_gatorPrv.ConfigureCalcObject("Alpha12");
                    this.m_alpha13 = this.m_gatorPrv.ConfigureCalcObject("Alpha13");
                    

                    if (this.m_alpha0 != null && this.m_alpha1 != null && this.m_alpha2 != null &&
                        this.m_alpha3 != null && this.m_alpha4 != null && this.m_alpha5 != null &&
                        this.m_alpha6 != null && this.m_alpha7 != null && this.m_alpha8 != null &&
                        this.m_alpha9 != null && this.m_alpha10 != null && this.m_alpha11 != null &&
                        this.m_alpha12 != null && this.m_alpha13 != null)
                    {
                        if (this.m_eccAno != null)
                            {return true;}
                    } 
                }
            }
            return false;
        }

        public bool PrePropagate(AgGatorPluginResultAttCtrl result)
        {
            if (result != null)
            {
                result.SetRefAxes("Satellite_Radial_Transverse_Normal_Template");
            }
            return true;
        }

        public bool PreNextStep(AgGatorPluginResultAttCtrl state)
        {
            return true;
        }

        public bool Evaluate(AgGatorPluginResultAttCtrl result)
        {
            if (result != null)
            {
                double FR, FW, FS, FT;

                double eccAno = this.m_eccAno.Evaluate(result);

                double Alpha0 = this.m_alpha0.Evaluate(result);
                double Alpha1 = this.m_alpha1.Evaluate(result);
                double Alpha2 = this.m_alpha2.Evaluate(result);
                double Alpha3 = this.m_alpha3.Evaluate(result);
                double Alpha4 = this.m_alpha4.Evaluate(result);
                double Alpha5 = this.m_alpha5.Evaluate(result);
                double Alpha6 = this.m_alpha6.Evaluate(result);
                double Alpha7 = this.m_alpha7.Evaluate(result);
                double Alpha8 = this.m_alpha8.Evaluate(result);
                double Alpha9 = this.m_alpha9.Evaluate(result);
                double Alpha10 = this.m_alpha10.Evaluate(result);
                double Alpha11 = this.m_alpha11.Evaluate(result);
                double Alpha12 = this.m_alpha12.Evaluate(result);
                double Alpha13 = this.m_alpha13.Evaluate(result);


                Debug.WriteLine(" Evaluate( " + this.GetHashCode() + " )");


                FR = Alpha0 + Alpha1 * Math.Cos(eccAno) + Alpha2 * Math.Cos(2 * eccAno) + Alpha3 * Math.Sin(eccAno);
                FS = Alpha4 + Alpha5 * Math.Cos(eccAno) + Alpha6 * Math.Cos(2 * eccAno) + Alpha7 * Math.Sin(eccAno) + Alpha8 * Math.Sin(2 * eccAno);
                FW = Alpha9 + Alpha10 * Math.Cos(eccAno) + Alpha11 * Math.Cos(2 * eccAno) + Alpha12 * Math.Sin(eccAno) + Alpha13 * Math.Sin(2 * eccAno);
                FT = Math.Sqrt(Math.Pow(FR, 2) + Math.Pow(FS, 2) + Math.Pow(FW, 2));

                double FRHat = FR / FT;
                double FSHat = FS / FT;
                double FWHat = FW / FT;

                double uHat = Math.Sqrt(Math.Pow(FRHat, 2) + Math.Pow(FSHat, 2) + Math.Pow(FWHat, 2));

                double Delta = Math.Asin(FSHat / uHat);
                double RA = Math.Asin(FWHat / FRHat);

                if (FRHat >= 0) {
                    result.EulerRotate(AgEEulerSequence.e321, RA, -Delta, 0);
                } else {
                    result.EulerRotate(AgEEulerSequence.e321, (Math.PI + RA), -Delta, 0);
                }
            }
            return true;
        }

        public void Free()
        {   }
        #endregion

        #region IAgUtPluginConfig Interface Implementation
        public object GetPluginConfig(AgAttrBuilder builder)
        {
            try
            {
                Debug.WriteLine("--> Entered", "GetPluginConfig()");

                if (builder != null)
                {
                    if (this.m_AttrScope == null)
                    {
                        this.m_AttrScope = builder.NewScope();

                        //====================
                        // General Attributes
                        //====================
                        //builder.AddStringDispatchProperty(this.m_AttrScope, "PluginName", "Human readable plugin name or alias", "Name", (int)AgEAttrAddFlags.eAddFlagReadOnly);
                        builder.AddStringDispatchProperty(this.m_AttrScope, "PluginName", "Human readable plugin name or alias", "Name", (int)AgEAttrAddFlags.eAddFlagReadOnly);

                        //================
                        // Attributes
                        //================ 
                    }

                    string config;
                    config = builder.ToString(this, this.m_AttrScope);
                    Debug.WriteLine("\n" + config, "GetPluginConfig()");
                }
            }
            finally
            {
                Debug.WriteLine("<-- Exited", "GetPluginConfig()");
            }

            return this.m_AttrScope;
        }

        public void VerifyPluginConfig(AgUtPluginConfigVerifyResult result)
        {
            try
            {
                Debug.WriteLine("Entered", "VerifyPluginConfig()");

                result.Result = true;
                result.Message = "Ok";
            }
            finally
            {
                Debug.WriteLine("Exited", "VerifyPluginConfig()");
            }
        }
        #endregion
    }
}
