using Microsoft.Win32;
using System;
using System.Text;
using System.Diagnostics;
using System.Runtime.InteropServices;

using AGI.Attr;
using AGI.Plugin;
using AGI.Astrogator;
using AGI.Astrogator.Plugin;
using AGI.STK.Plugin;
using System.IO;

namespace TFCEnginePlugin
{
    /// <summary>
    /// Example1 Gator Engine Model
    /// </summary>
    // NOTE: Generate your own Guid using Microsoft's GuidGen.exe
    // If you used this plugin in STK 6, 7 you should create a new
    // copy of your plugin's source, and update it with a new GUID
    // for STK 8.  Then you will be able to make changes in the 
    // new STK 8 plugin and not affect your old STK 6,7 plugin.
    [Guid("D67238E4-92A9-4FA1-A4DA-F75F13B39564")]
    // NOTE: Create your own ProgId to match your plugin's namespace and name
    [ProgId("TFCEnginePlugin.TFCRNeg")]
    // NOTE: Specify the ClassInterfaceType.None enumeration, so the custom COM Interface 
    // you created, i.e. IExample1, is used instead of an autogenerated COM Interface.
    [ClassInterface(ClassInterfaceType.None)]

    public class TFCRNeg :
        ITFC,
        IAgGatorPluginEngineModel,
        IAgUtPluginConfig

    {

        #region Data Members

        private IAgUtPluginSite m_UtPluginSite = null;
        private object m_AttrScope = null;
        private AgGatorPluginProvider m_gatorPrv = null;
        private AgGatorConfiguredCalcObject m_eccAno = null;
        private AgGatorConfiguredCalcObject m_mass = null;

        private AgGatorConfiguredCalcObject m_AlphaR0 = null;
        private AgGatorConfiguredCalcObject m_AlphaR1 = null;
        private AgGatorConfiguredCalcObject m_AlphaR2 = null;
        private AgGatorConfiguredCalcObject m_BetaR1 = null;
        
        #endregion

        #region Life Cycle Methods
        /// <summary>
        /// Constructor
        /// </summary>
        public TFCRNeg()
        {
            try
            {
                Debug.WriteLine("Entered", "TFCRNeg()");
                
            }
            finally
            {
                Debug.WriteLine("Exited", "TFCRNeg()");
            }
        }

        /// <summary>
        /// Destructor
        /// </summary>
        ~TFCRNeg()
        {
            try
            {
                Debug.WriteLine("Entered", "~TFCRNeg()");
            }
            finally
            {
                Debug.WriteLine("Exited", "~TFCRNeg()");
            }
        }

        private void Message(AgEUtLogMsgType msgType, string msg)
        {
            if (this.m_UtPluginSite != null)
            {
                this.m_UtPluginSite.Message(msgType, msg);
            }
        }
        #endregion

        #region ITFC Interface Implementation

        //Variable for the TFC
        private string m_Name = "TFCEnginePluginRNeg"; // Plugin Significant

        private double m_Isp = 1200;

        public string Name
        {
            get
            { return this.m_Name; }
            set
            { this.m_Name = value; }
        }


        public double Isp { get { return this.m_Isp; } set { this.m_Isp = value; } }

        #endregion

        #region IAgGatorPluginEngineModel Interface Implementation
        public bool Init(IAgUtPluginSite site)
        {
            this.m_UtPluginSite = site;

            if (this.m_UtPluginSite != null)
            {
                this.m_gatorPrv = ((IAgGatorPluginSite)(this.m_UtPluginSite)).GatorProvider;

                if (this.m_gatorPrv != null)
                {
                    this.m_eccAno = this.m_gatorPrv.ConfigureCalcObject("Eccentric_Anomaly");
                    this.m_mass = this.m_gatorPrv.ConfigureCalcObject("Total_Mass");

                    this.m_AlphaR0 = this.m_gatorPrv.ConfigureCalcObject("AlphaR0");
                    this.m_AlphaR1 = this.m_gatorPrv.ConfigureCalcObject("AlphaR1");
                    this.m_AlphaR2 = this.m_gatorPrv.ConfigureCalcObject("AlphaR2");
                    this.m_BetaR1 = this.m_gatorPrv.ConfigureCalcObject("BetaR1");
                    
                    if (this.m_eccAno != null && this.m_mass != null && this.m_AlphaR0 != null && this.m_AlphaR1 != null 
                        && this.m_AlphaR2 != null && this.m_BetaR1 != null)
                        return true;
                }
            }
            return false;
        }

        public bool PrePropagate(AgGatorPluginResultState result)
        {
            return true;
        }

        public bool PreNextStep(AgGatorPluginResultState state)
        {
            return true;
        }

        public bool Evaluate(AgGatorPluginResultEvalEngineModel result)
        {
            if (result != null)
            {

                double eccAno = this.m_eccAno.Evaluate(result);
                double mass = this.m_mass.Evaluate(result);

                double alphaR0 = this.m_AlphaR0.Evaluate(result);
                double alphaR1 = this.m_AlphaR1.Evaluate(result);
                double alphaR2 = this.m_AlphaR2.Evaluate(result);
                double betaR1 = this.m_BetaR1.Evaluate(result);

                double FR = alphaR0 + alphaR1 * Math.Cos(eccAno) + alphaR2 * Math.Cos(2 * eccAno) +
                            betaR1 * Math.Sin(eccAno);
                
                //error on FR,W,S < 0 
                //The thrust will error on negative in STK
                if (FR < 0)
                    FR = Math.Abs(FR);
                else
                    FR = 0;

                double thrust = FR * mass;

                result.SetThrustAndIsp(thrust, Isp);
            }
            return true;
        }

        public bool Update(AgGatorPluginResultState result)
        {
            return true;
        }

        public void Free()
        {
        }
        #endregion

        #region IAgUtPluginConfig Interface Implementation
        public object GetPluginConfig(AgAttrBuilder builder)
        {
            try
            {
                Debug.WriteLine("--> Entered", "GetPluginConfig()");

                if (builder != null)
                {
                    if (this.m_AttrScope == null)
                    {
                        this.m_AttrScope = builder.NewScope();

                        //====================
                        // General Attributes
                        //====================
                        //builder.AddStringDispatchProperty(this.m_AttrScope, "PluginName", "Human readable plugin name or alias", "Name", (int)AgEAttrAddFlags.eAddFlagReadOnly);
                        builder.AddStringDispatchProperty(this.m_AttrScope, "PluginName", "Human readable plugin name or alias", "Name", (int)AgEAttrAddFlags.eAddFlagReadOnly);

                        //================
                        // Thrust Attributes
                        //================

                        builder.AddDoubleDispatchProperty(this.m_AttrScope, "Isp", "Specific Impulse", "Isp", (int)AgEAttrAddFlags.eAddFlagNone);

                       
                    }

                    string config;
                    config = builder.ToString(this, this.m_AttrScope);
                    Debug.WriteLine("\n" + config, "GetPluginConfig()");
                }
            }
            finally
            {
                Debug.WriteLine("<-- Exited", "GetPluginConfig()");
            }

            return this.m_AttrScope;
        }

        public void VerifyPluginConfig(AgUtPluginConfigVerifyResult result)
        {
            try
            {
                Debug.WriteLine("Entered", "VerifyPluginConfig()");

                result.Result = true;
                result.Message = "Ok";
            }
            finally
            {
                Debug.WriteLine("Exited", "VerifyPluginConfig()");
            }
        }
        #endregion

    }
}
