using Microsoft.Win32;
using System;
using System.Text;
using System.Diagnostics;
using System.Runtime.InteropServices;

using AGI.Attr;
using AGI.Plugin;
using AGI.Astrogator;
using AGI.Astrogator.Plugin;
using AGI.STK.Plugin;

namespace TFCEnginePlugin
{
    /// <summary>
    /// Example1 Gator Engine Model
    /// </summary>
    // NOTE: Generate your own Guid using Microsoft's GuidGen.exe
    // If you used this plugin in STK 6, 7 you should create a new
    // copy of your plugin's source, and update it with a new GUID
    // for STK 8.  Then you will be able to make changes in the 
    // new STK 8 plugin and not affect your old STK 6,7 plugin.
    [Guid("13285204-5B24-456E-A888-9F0420D66412")]
    // NOTE: Create your own ProgId to match your plugin's namespace and name
    [ProgId("TFCEnginePlugin.TFCWNeg")]
    // NOTE: Specify the ClassInterfaceType.None enumeration, so the custom COM Interface 
    // you created, i.e. IExample1, is used instead of an autogenerated COM Interface.
    [ClassInterface(ClassInterfaceType.None)]

    public class TFCWNeg :
        ITFC,
        IAgGatorPluginEngineModel,
        IAgUtPluginConfig

    {

        #region Data Members

        private IAgUtPluginSite m_UtPluginSite = null;
        private object m_AttrScope = null;
        private AgGatorPluginProvider m_gatorPrv = null;
        private AgGatorConfiguredCalcObject m_eccAno = null;
        private AgGatorConfiguredCalcObject m_mass = null;

        private AgGatorConfiguredCalcObject m_AlphaW0 = null;
        private AgGatorConfiguredCalcObject m_AlphaW1 = null;
        private AgGatorConfiguredCalcObject m_AlphaW2 = null;
        private AgGatorConfiguredCalcObject m_BetaW1 = null;
        private AgGatorConfiguredCalcObject m_BetaW2 = null;

        #endregion

        #region Life Cycle Methods
        /// <summary>
        /// Constructor
        /// </summary>
        public TFCWNeg()
        {
            try
            {
                Debug.WriteLine("Entered", "TFCWNeg()");


            }
            finally
            {
                Debug.WriteLine("Exited", "TFCWNeg()");
            }
        }

        /// <summary>
        /// Destructor
        /// </summary>
        ~TFCWNeg()
        {
            try
            {
                Debug.WriteLine("Entered", "~TFCWNeg()");
            }
            finally
            {
                Debug.WriteLine("Exited", "~TFCWNeg()");
            }
        }

        private void Message(AgEUtLogMsgType msgType, string msg)
        {
            if (this.m_UtPluginSite != null)
            {
                this.m_UtPluginSite.Message(msgType, msg);
            }
        }
        #endregion

        #region ITFC Interface Implementation

        //Variable for the TFC
        private string m_Name = "TFCEnginePlugin"; // Plugin Significant

        private double m_Isp = 1200;

        public string Name
        {
            get
            {
                return this.m_Name;
            }
            set
            {
                this.m_Name = value;
            }
        }

        public double Isp
        {
            get
            {
                return this.m_Isp;
            }
            set
            {
                this.m_Isp = value;
            }
        }

        #endregion

        #region IAgGatorPluginEngineModel Interface Implementation
        public bool Init(IAgUtPluginSite site)
        {
            this.m_UtPluginSite = site;

            if (this.m_UtPluginSite != null)
            {
                this.m_gatorPrv = ((IAgGatorPluginSite)(this.m_UtPluginSite)).GatorProvider;

                if (this.m_gatorPrv != null)
                {
                    this.m_eccAno = this.m_gatorPrv.ConfigureCalcObject("Eccentric_Anomaly");
                    this.m_mass = this.m_gatorPrv.ConfigureCalcObject("Total_Mass");

                    this.m_AlphaW0 = this.m_gatorPrv.ConfigureCalcObject("AlphaW0");
                    this.m_AlphaW1 = this.m_gatorPrv.ConfigureCalcObject("AlphaW1");
                    this.m_AlphaW2 = this.m_gatorPrv.ConfigureCalcObject("AlphaW2");
                    this.m_BetaW1 = this.m_gatorPrv.ConfigureCalcObject("BetaW1");
                    this.m_BetaW2 = this.m_gatorPrv.ConfigureCalcObject("BetaW2");

                    if (this.m_eccAno != null && this.m_mass != null && this.m_AlphaW0 != null && this.m_AlphaW1 != null
                        && this.m_AlphaW2 != null && this.m_BetaW1 != null && this.m_BetaW2 != null)
                    {
                        return true;
                    }
                }
            }

            return false;
        }

        public bool PrePropagate(AgGatorPluginResultState result)
        {
            return true;
        }

        public bool PreNextStep(AgGatorPluginResultState state)
        {
            return true;
        }

        public bool Evaluate(AgGatorPluginResultEvalEngineModel result)
        {
            if (result != null)
            {

                //Debug.WriteLine(" Evaluate( " + this.GetHashCode() + " )");

                double eccAno = this.m_eccAno.Evaluate(result);
                double mass = this.m_mass.Evaluate(result);

                double alphaW0 = this.m_AlphaW0.Evaluate(result);
                double alphaW1 = this.m_AlphaW1.Evaluate(result);
                double alphaW2 = this.m_AlphaW2.Evaluate(result);
                double betaW1 = this.m_BetaW1.Evaluate(result);
                double betaW2 = this.m_BetaW2.Evaluate(result);

                double FW = alphaW0 + alphaW1 * Math.Cos(eccAno) + alphaW2 * Math.Cos(2 * eccAno) +
                    betaW1 * Math.Sin(eccAno) + betaW2 * Math.Sin(2 * eccAno);
                //error on FR,W,S <=0 

                if (FW < 0)
                    FW = Math.Abs(FW);
                else
                    FW = 0;

                result.SetThrustAndIsp(FW*mass, Isp);
            }

            return true;
        }

        public void Free()
        {
        }
        #endregion

        #region IAgUtPluginConfig Interface Implementation
        public object GetPluginConfig(AgAttrBuilder builder)
        {
            try
            {
                Debug.WriteLine("--> Entered", "GetPluginConfig()");

                if (builder != null)
                {
                    if (this.m_AttrScope == null)
                    {
                        this.m_AttrScope = builder.NewScope();

                        //====================
                        // General Attributes
                        //====================
                        builder.AddStringDispatchProperty(this.m_AttrScope, "PluginName", "Human readable plugin name or alias", "Name", (int)AgEAttrAddFlags.eAddFlagReadOnly);

                        //================
                        // Thrust Attributes
                        //================


                        builder.AddDoubleDispatchProperty(this.m_AttrScope, "Isp", "Specific Impulse", "Isp", (int)AgEAttrAddFlags.eAddFlagNone);
                    }

                    string config;
                    config = builder.ToString(this, this.m_AttrScope);
                    Debug.WriteLine("\n" + config, "GetPluginConfig()");
                }
            }
            finally
            {
                Debug.WriteLine("<-- Exited", "GetPluginConfig()");
            }

            return this.m_AttrScope;
        }

        public void VerifyPluginConfig(AgUtPluginConfigVerifyResult result)
        {
            try
            {
                Debug.WriteLine("Entered", "VerifyPluginConfig()");

                result.Result = true;
                result.Message = "Ok";
            }
            finally
            {
                Debug.WriteLine("Exited", "VerifyPluginConfig()");
            }
        }
        #endregion
    }
}
